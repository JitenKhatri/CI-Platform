@using CI_Platform.Models.ViewModels
@{
    Layout = null;
}
@model AddMissionViewModel

<div class="container-fluid grid-container">

    <form id="AddMissionForm" onsubmit="AddMission(this,event)" enctype="multipart/form-data">
        <div class="row mb-3">
            <div class="col-6">

                <label class="form-label">Title</label>
                <input type="text" asp-for="Title" name="Title" class="form-control" value="@Model.Title" placeholder="Enter Mission Title" />
                <span asp-validation-for="Title" class="text-danger d-block"></span>
            </div>

            <div class="col-6">

                <label asp-for="ShortDescription" class="form-label">ShortDescription</label>
                <input type="text" asp-for="ShortDescription" name="ShortDescription" class="form-control" value="@Model.ShortDescription" placeholder="Enter Short Description" />
                <span asp-validation-for="ShortDescription" class="text-danger d-block"></span>
            </div>
        </div>
        <div class="mb-3">

            <label class="form-label">Description</label>
            <textarea asp-for="Description" name="Description" class="form-control" id="missiondescription" value="@Model.Description"></textarea>
            <span asp-validation-for="Description" class="alert-danger d-block"></span>
            <span class="text-danger d-none mission-description-required">Mission description has to have at least 20 characters</span>
        </div>
        <div class="row mb-3">
            <div class="col-6">

                <label asp-for="CityId" class="form-label">City</label>
                <select asp-for="CityId" id='city' class="form-select city me-3" aria-label="Select City">
                    <option disabled selected>Select Your City</option>
                    @{
                        foreach (var item in Model.Cities)
                        {
                            bool isexist = (item.CityId == @Model.CityId);
                            if (isexist)
                            {
                                <option value=@item.CityId selected>@item.Name</option>
                            }
                        }
                    }
                </select>
                <span asp-validation-for="CityId" class="text-danger d-block"></span>
            </div>
            <div class="col-6">

                <label asp-for="CountryId" class="form-label">Country</label>
                <select id='country' asp-for="CountryId" onchange="CascadeCity()" class="form-select country me-3" aria-label="Select Country">
                    <option disabled selected>Select Your Country</option>
                    @{
                        foreach (var item in Model.Countries)
                        {
                            bool isexist = (item.CountryId == @Model.CountryId);
                            if (isexist)
                            {
                                <option value=@item.CountryId selected>@item.Name</option>
                            }
                            else
                            {
                                <option value=@item.CountryId>@item.Name</option>
                            }

                        }
                    }

                </select>
                <span asp-validation-for="CountryId" class="text-danger d-block"></span>
            </div>
        </div>
        <div class="mb-3">


            <label class="form-label">OrganizationName</label>
            <input type="text" asp-for="OrganizationName" name="OrganizationName" class="form-control" value="@Model.OrganizationName" placeholder="Enter Organization Name" />
            <span asp-validation-for="OrganizationName" class="text-danger d-block"></span>


        </div>  <div class="mb-3">

            <label asp-for="OrganizationDetail" class="form-label">OrganizationDetail</label>
            <textarea asp-for="OrganizationDetail" id="organizationdetail" name="OrganizationDetail" class="form-control" value="@Model.OrganizationDetail"></textarea>
            <span asp-validation-for="OrganizationDetail" class="text-danger d-block"></span>

        </div>
        <div class="row mb-3">
            <div class="col-6">

                <label asp-for="StartDate" class="form-label">StartDate</label>
                <input type="date" min=@DateTime.Now.ToString("yyyy-MM-dd") max=@DateTime.Now.AddYears(1).ToString("yyyy-MM-dd") asp-for="StartDate" name="StartDate" class="form-control" placeholder="Enter StartDate" />
                <span asp-validation-for="StartDate" class="text-danger d-block"></span>
            </div>
            <div class="col-6">
                <label asp-for="EndDate" class="form-label">EndDate</label>
                <input type="date" asp-for="EndDate" name="EndDate" class="form-control" data-val-greaterthanstartdate="End date must be greater than start date" placeholder="Enter EndDate" />
                <span asp-validation-for="EndDate" class="text-danger d-block"></span>
            </div>
        </div>
        <div class="row mb-3">
            <div class="col-6">
                <label asp-for="MissionType" class="form-label">MissionType</label>
                <select id="mission-type" asp-for="MissionType" class="form-select missiontype me-3" aria-label="Select MissionType">
                    <option disabled selected>Select Mission Type</option>
                    <option value="Time">Time</option>
                    <option value="Go">Goal</option>
                </select>
                <span asp-validation-for="MissionType" class="text-danger d-block"></span>
            </div>
            <div class="col-6" id="SeatsLeft">

                <label class="form-label">TotalSeats</label>
                <input type="number" asp-for="SeatsLeft" name="SeatsLeft" class="form-control" value="@Model.SeatsLeft" placeholder="Enter TotalSeats" />
                <span asp-validation-for="SeatsLeft" class="text-danger d-block"></span>
            </div>

        </div>
        <div class="mb-3" id="Deadline">

            <label class="form-label">Deadline</label>
            <input type="date" asp-for="Deadline" name="Deadline" class="form-control" data-val-deadlinebeforeenddate="Deadline must be before end date and start date" placeholder="Enter Deadline" />
            <span asp-validation-for="Deadline" class="text-danger d-block"></span>
        </div>
        <div class="mb-3 d-none" id="Goal_Motto">

            <label asp-for="Goal_Motto" class="form-label">Goal_Motto</label>
            <input type="text" asp-for="Goal_Motto" name="Goal_Motto" class="form-control" value="@Model.Goal_Motto" placeholder="Enter Goal_Motto" />
            <span asp-validation-for="Goal_Motto" class="text-danger d-block"></span>
            <label asp-for="Goal_Achieved" class="form-label">Goal Value</label>
            <input type="number" asp-for="Goal_Achieved" name="Goal_Achieved" class="form-control" value="@Model.Goal_Achieved" placeholder="Enter Goal value" />
            <span asp-validation-for="Goal_Achieved" class="text-danger d-block"></span>
        </div>

        <div class="row mb-3">
            <div class="col-6">

                <label asp-for="ThemeId" class="form-label">Theme</label>
                <select id='Theme' asp-for="ThemeId" class="form-select theme me-3" aria-label="Select Theme">
                    <option disabled selected>Select Mission Theme</option>
                    @{
                        foreach (var item in Model.Themes)
                        {
                            bool isexist = (item.MissionThemeId == @Model.ThemeId);
                            if (isexist)
                            {
                                <option value=@item.MissionThemeId selected>@item.Title</option>
                            }
                            else
                            {
                                <option value=@item.MissionThemeId>@item.Title</option>
                            }

                        }
                    }
                </select>
                <span asp-validation-for="ThemeId" class="text-danger d-block"></span>
            </div>
            <div class="col-6">

                <label asp-for="Availability" class="form-label">Availability</label>
                <select asp-for="Availability" class="form-select Availability me-3" aria-label="Select Availability">
                    <option disabled selected>Select Availability</option>
                    <option value="wekly">Weekly</option>
                    <option value="daily">daily</option>
                </select>
                <span asp-validation-for="Availability" class="text-danger d-block"></span>
            </div>
        </div>
        <div class="mb-3">
            <input asp-for="Selected_Skills" value="@Model.Selected_Skills" type="hidden" id="selected_skills" />
            <input type="hidden" value="@Model.Selected_skill_names" id="selected_skill_names" />
            <div class="mt-4 w-100 saved-skills d-flex flex-column border border-1" style="height:200px;">

                @{
                    foreach (var item in Model.MissionSkills)
                    {
                        <span class="mt-1 ms-1" id="@item.SkillId">@item.Skill.SkillName</span>
                    }
                }
            </div>
            <div class="save d-flex flex-row align-items-start mt-3">


                <button type="button" class="cancelbtn mt-2" data-bs-toggle="modal" data-bs-target="#addskills">Add Skills</button>


            </div>
        </div>
        <div class="mb-3">


            <label asp-for="YoutubeUrl" class="form-label">YoutubeUrl</label>
            <input type="text" asp-for="YoutubeUrl" class="form-control" value="@Model.YoutubeUrl" placeholder="Enter YoutubeUrls" />
            <span asp-validation-for="YoutubeUrl" class="text-danger d-block"></span>


        </div>
        <div class="mb-3">
            <label asp-for="Media" class="form-label">Mission Images</label> <span class="text-danger mediarequired">*Required</span>
            <div class="dropzone d-flex flex-row" id="myDropzone">
                <div id="imagePreview" class="dz-preview">
                    <div id="previewTemplate" class="preview-container" style="margin-right:30px;">
                        <button type="button" class="btn-remove" style="display:none" data-dz-remove>
                            <img src="~/images/cross.png" />
                        </button>
                        <img class="preview" data-dz-thumbnail />
                    </div>
                </div>
            </div>

        </div>
        <div class="mb-3">
            <label asp-for="MissionDocuments" class="form-label">Mission Documents</label>
            <div class="dropzone d-flex flex-row" id="documentdropzone">
                <div id="imagePreview" class="dz-preview">
                    <div id="previewTemplate" class="preview-container" style="margin-right:30px;">
                        <button type="button" class="btn-remove" style="display:none" data-dz-remove>
                            <img src="~/images/cross.png" />
                        </button>
                        <img class="preview" data-dz-thumbnail />
                    </div>
                </div>
            </div>

        </div>


        <input type="hidden" asp-for="MissionId" />

        <div class="d-flex flex-row mt-3">
            <button type="submit" class="btn add-btn">Save</button>
        </div>
    </form>
    @foreach (var urls in @Model.MissionMedia)
    {
        <input type="hidden" value="@urls.MediaPath" class="imageurl">
    }
    @foreach (var urls in @Model.ExistingDocuments)
    {
        <input type="hidden" value="@urls.DocumentPath" class="documenturl">
    }
    <script src="~/lib/jquery-validation/dist/jquery.validate.min.js"></script>
    <script src="~/lib/jquery-validation-unobtrusive/jquery.validate.unobtrusive.min.js"></script>

    @*modal of skills*@
    <div class="modal fade" id="addskills" data-bs-backdrop="false" data-bs-keyboard="false" tabindex="-1" aria-labelledby="staticBackdropLabel" aria-hidden="true">
        <div class="modal-dialog modal-dialog-scrollable">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="staticBackdropLabel">Add Your Skills</h5>
                </div>
                <div class="modal-body d-flex justify-content-between">
                    <div class="all-skills d-flex flex-column text-muted border border-1 px-2" style="min-width:46%;">
                        @{
                            foreach (var item in Model.Skills)
                            {
                                <span onclick="addskill('skill-@item.SkillId','@item.SkillName')" class="mt-1" style="cursor:pointer;" id="skill-@item.SkillId">@item.SkillName</span>
                            }
                        }

                    </div>
                    <div class="d-flex flex-column justify-content-center align-items-center buttons">
                        <img style="cursor:pointer;" src="~/images/right-arrow1.png" />
                        <img class="mt-3" src="~/images/left.png" />
                    </div>
                    <div class="selected-skills d-flex flex-column text-muted border border-1 px-2" style="min-width:46%;">
                        @{
                            foreach (var item in Model.MissionSkills)
                            {
                                <span class="mt-1" id="@item.SkillId">@item.Skill.SkillName</span>
                            }
                        }
                    </div>
                </div>
                <div class="modal-footer">
                    <div data-bs-dismiss="modal" style="cursor:pointer;" class="col-lg-2 col-md-3 col-sm-2 col-3 d-flex justify-content-center align-items-center border border-dark rounded-pill mt-2">
                        <span class="p-1 text-muted" style="white-space:nowrap;">Cancel</span>
                    </div>
                    <button style="border: 2px solid #F88634;border-radius: 100px;color: #F88634;padding-left: 20px; padding-right: 20px;" type="button" onclick="saveskills()" class="btn applyButton" data-bs-dismiss="modal">Save</button>
                </div>
            </div>
        </div>
    </div>
</div>

<script>
        $.validator.addMethod('greaterthanstartdate', function (value, element, params) {
        var startDate = new Date($('#StartDate').val());
        var endDate = new Date(value);
        return endDate > startDate;
    });

    $.validator.unobtrusive.adapters.add('greaterthanstartdate', [], function (options) {
        options.rules['greaterthanstartdate'] = {};
        options.messages['greaterthanstartdate'] = options.message;
    });

    $.validator.addMethod("deadlinebeforeenddate", function (value, element, params) {
                var startdate = new Date($('#StartDate').val());
                var enddate = new Date($('#EndDate').val());
                var deadline = new Date(value);
                return deadline < enddate && deadline <= startdate;
            });
            $.validator.unobtrusive.adapters.add("deadlinebeforeenddate", ["startdate", "enddate"], function (options) {
                options.rules["deadlinebeforeenddate"] = {
                    startdate: "#" + options.params.startdate,
                    enddate: "#" + options.params.enddate
                };
                options.messages["deadlinebeforeenddate"] = options.message;
            });
        var Skills = [];
    var skills_name = [];
    var selectedSkillsInput = document.getElementById('selected_skills');
    if (selectedSkillsInput.value != "") {
        Skills = selectedSkillsInput.value.split(',').map(id => parseInt(id));
    }


    var selectedskillnameinput = document.getElementById('selected_skill_names');
    if (selectedskillnameinput.value != "") {
        skills_name = selectedskillnameinput.value.split(',');
    }
    function addskill(skill_id, skill_name) {
        var id = parseInt(skill_id.slice(6))
        if (!Skills.includes(id)) {
            $(`#${skill_id}`).css("background-color", "#0000000D")
            $('.selected-skills').append(`<span class="mt-1" id=${id}>` + skill_name + '</span>')
            Skills.push(id)
            skills_name.push(skill_name)
            document.getElementById('selected_skills').value += (Skills.length > 1 ? ',' : '') + id;
        }
        else {
            $(`#${skill_id}`).css("background-color", "white")
            $('.selected-skills').find(`#${id}`).remove()
            Skills.splice(Skills.indexOf(id), 1)
            skills_name.splice(skills_name.indexOf(skill_name), 1)
            document.getElementById('selected_skills').value = Skills.join(',');
        }
    }

    function saveskills() {
        $('.saved-skills').empty()
        skills_name.forEach((item, i) => {
            $('.saved-skills').append(`<span class="mt-1 ms-3">` + item + '</span>')
        })
    }
    const missionTypeSelect = document.querySelector('#mission-type');
    if(missionTypeSelect.value == "Go")
    {
    $('#Goal_Motto').addClass('d-block').removeClass('d-none');
    }
    else{
        $('#Goal_Motto').addClass('d-none').removeClass('d-block');
    }
    missionTypeSelect.addEventListener('change', (event) => {
        // Get the value of the selected option
        const selectedValue = event.target.value;

        // Hide both mission sections initially
        $('#Goal_Motto').addClass('d-none').removeClass('d-block');
        $('#Deadline').addClass('d-none').removeClass('d-block');
            $('#SeatsLeft').addClass('d-block').removeClass('d-none');
        // Show the appropriate mission section based on the selected value
        if (selectedValue === 'Time') {
            $('#Deadline').addClass('d-block').removeClass('d-none');
            $('#SeatsLeft').addClass('d-block').removeClass('d-none');
        } else if (selectedValue === 'Go') {
            $('#Goal_Motto').addClass('d-block').removeClass('d-none');
            $('#Deadline').addClass('d-block').removeClass('d-none');
        }
    });

    Dropzone.autoDiscover = false;
    $(function () {
        var myDropzone = new Dropzone("#myDropzone", {
            url: "/Story/ShareStory",
            maxFiles: 10,
            maxFilesize: 10000,
            uploadMultiple: true,
            acceptedFiles: ".jpeg,.jpg,.png",
            //acceptedFiles: "*",
            addRemoveLinks: false,
            dictRemoveFile: "Remove",
            autoProcessQueue: false,
            dictDefaultMessage: "Drop files here or click to upload",
            dictInvalidFileType: "Invalid file type. Only JPEG, JPG and PNG are allowed.",
            dictFileTooBig: "File size is too big. Maximum file size allowed is 4MB.",
            dictMaxFilesExceeded: "You can only upload a maximum of 10 files.",
            previewTemplate: $("#imagePreview").html(),
            init: function () {
                this.on("addedfile", function (file) {
                    if (file.type.startsWith('image/')) {
                    // Show the remove button when a file is added
                    file.previewElement.querySelector(".btn-remove").style.display = "block";
                    file.previewElement.querySelector(".btn-remove").addEventListener("click", function () {
                        // Remove the file from Dropzone
                        myDropzone.removeFile(file);
                    }); }
                    $('.mediarequired').addClass('d-none').removeClass('d-inline');
                });
                this.on("maxfilesexceeded", function (file) {
                    this.removeFile(file);
                    toastr.error('You can only upload a maximum of 10 images!', {
                    "positionClass": "toast-top-center",
                    progressBar: true,
                    timeOut: 3000,
                    closeButton: true,
                });
                });
                let myDropzone = this;
                var imageurls = $(".imageurl").get();
                imageurls.forEach(i => {
                    //let mockFile = { name: "Filename 2", size: 12345 };
                    //myDropzone.displayExistingFile(mockFile, i.value);
                    console.log(i.value);
                    fetch(i.value)
                        .then(response => response.blob())
                        .then(blob => {
                            var file = new File([blob], i.value, { type: blob.type });
                            var files = myDropzone.getAcceptedFiles();
                            files.push(file);
                            myDropzone.addFile(file); // add the file to the upload queue
                        })
                        .catch(error => console.error(error));
                });// manually trigger processing of the preselected file
                myDropzone.on("addedfile", function (file) {
                    console.log("Added file:", file);
                });
                    myDropzone.on('error', function (file, errorMessage) {

                        toastr.error('You can only upload images!', {
                    "positionClass": "toast-top-center",
                    progressBar: true,
                    timeOut: 3000,
                    closeButton: true,
                });
                        this.removeFile(file);

                    });
                this.on("removedfile", function (file) {
                    console.log("File removed:", file);
                    var files = myDropzone.getAcceptedFiles();
                    if(files.length < 1) {
                    $('.mediarequired').removeClass('d-none').addClass('d-inline') }
                });
            }

        });
    });

    //mission document dropzone
    Dropzone.autoDiscover = false;
    $(function () {
        var mydropzone = new Dropzone("#documentdropzone", {
            url: "/Admin/MissionCrud",
            maxFiles: 4,
            maxFilesize: 10000,
            uploadMultiple: true,
            acceptedFiles: ".pdf,.doc,.docx",
            addRemoveLinks: true,
            dictRemoveFile: "Remove",
            autoProcessQueue: false,
            dictDefaultMessage: "Drop files here or click to upload",
            dictInvalidFileType: "Invalid file type. Only .pdf, .doc and .docx are allowed.",
            dictFileTooBig: "File size is too big. Maximum file size allowed is 4MB.",
            dictMaxFilesExceeded: "You can only upload a maximum of 4 files.",

            init: function () {
                this.on("maxfilesexceeded", function (file) {
                    this.removeFile(file);
                    toastr.error('You can only upload a maximum of 4 images!', {
                    "positionClass": "toast-top-center",
                    progressBar: true,
                    timeOut: 3000,
                    closeButton: true,
                });
                });
                this.on("removedfile", function (file) {
                    console.log("File removed:", file);
                    // Remove the file from the server using AJAX if necessary
                });
                this.on("addedfile", function (file) {
                    console.log("Added file:", file);
                });
                let myDropzone = this;
                var imageurls = $(".documenturl").get();
                imageurls.forEach(i => {
                    //let mockFile = { name: "Filename 2", size: 12345 };
                    //myDropzone.displayExistingFile(mockFile, i.value);
                    console.log(i.value);
                    fetch(i.value)
                        .then(response => response.blob())
                        .then(blob => {
                            var file = new File([blob], i.value, { type: blob.type });
                            var files = myDropzone.getAcceptedFiles();
                            files.push(file);
                            myDropzone.addFile(file); // add the file to the upload queue
                        })
                        .catch(error => console.error(error));
                });// manually trigger processing of the preselected file
            }
        });
    });

    function checkFileExt(filename) {
        filename = filename.toLowerCase();
        return filename.split('.').pop();
    }

    CKEDITOR.replace('missiondescription', {
        height: 200,
        removeButtons: ['About', 'Cut', 'Copy', 'Paste', 'Link', 'Unlink', 'Anchor', 'Indent', 'Outdent', 'NumberedList', 'BulletedList']
    }
    );

    // Get the CKEditor instance
    var editor = CKEDITOR.instances['missiondescription'];

    // Add validation attributes to the CKEditor instance
    editor.element.setAttribute('data-val', 'true');
    editor.element.setAttribute('data-val-required', 'The Description field is required.');

    CKEDITOR.replace('organizationdetail', {
        height: 200,
        removeButtons: ['About', 'Cut', 'Copy', 'Paste', 'Link', 'Unlink', 'Anchor', 'Indent', 'Outdent', 'NumberedList', 'BulletedList']
    }
    );


    // Get the CKEditor instance
    var editor1 = CKEDITOR.instances['organizationdetail'];
    // Add validation attributes to the CKEditor instance
    editor1.element.setAttribute('data-val', 'true');
    editor1.element.setAttribute('data-val-required', 'The Description field is required.');



    function AddMission(form, e) {
        e.preventDefault();
        editor.updateElement();
        editor1.updateElement();
        var formData = new FormData(form);
        var Missiondescription = CKEDITOR.instances.missiondescription.getData();
        var Organizationdescription = CKEDITOR.instances.organizationdetail.getData();
        if(Missiondescription.length < 20)
        {
          $(".mission-description-required").addClass("d-block").removeClass("d-none")
        }
        else {
          $(".mission-description-required").addClass("d-none").removeClass("d-block")
        }
        if(Missiondescription.length > 20) {
                    var myDropzone = Dropzone.forElement("#myDropzone");
                    var files = myDropzone.files;
                    for (var i = 0; i < files.length; i++) {
                        formData.append('Media', files[i]);
                    }
                    var documentdropzone = Dropzone.forElement("#documentdropzone");
                    var Files = documentdropzone.files;
                    for (var j = 0; j < Files.length; j++) {
                        formData.append('MissionDocuments', Files[j]);
                    }
                    $.ajax({
                        type: 'POST',
                        url: "/Admin/MissionCrud",
                        data: formData,
                        processData: false,
                        contentType: false,
                        success: function () {
                            toastr.success('Mission Saved Successfully!', {
                                "positionClass": "toast-top-center",
                                progressBar: true,
                                timeOut: 3000,
                                closeButton: true,
                            });
                            $("#AddMissionForm")[0].reset();
                            if (formData.MissionId != 0) {
                                setTimeout(function () {
                                    window.location.reload();
                                }, 5000);

                            }
                        },
                        error: function (error) {
                            console.log("Error updating variable");
                        }
                    });
        }
    }
</script>